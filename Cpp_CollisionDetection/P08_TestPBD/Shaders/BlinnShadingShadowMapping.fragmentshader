#version 330 core

in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;
in vec4 ShadowCoord;

// Ouput data
out vec3 color;

// Values that stay constant for the whole mesh.

uniform vec3 LightPosition_worldspace;

const vec3 LightColor = vec3(1,1,1);
const float LightPower = 700.0f;
const vec3 MaterialAmbientColor = vec3(0.1,0.1,0.1);
const vec3 MaterialSpecularColor = vec3(1.0,1.0,1.0);
const vec3 MaterialDiffuseColor = vec3(1.0,0.0,0.0);

uniform sampler2DShadow shadowMap;
//uniform sampler2D shadowMap;

float near = 20; 
float far  = 80.0; 

float LinearizeDepth(float depth) 
{
    float z = depth * 2.0 - 1.0; // back to NDC 
    return (2.0 * near * far) / (far + near - z * (far - near));	
}

void main()
{

	// Distance to the light
	float distance = length( LightPosition_worldspace - Position_worldspace );

	// Normal of the computed fragment, in camera space
	vec3 n = normalize( Normal_cameraspace );
	// Direction of the light (from the fragment to the light)
	vec3 l = normalize( LightDirection_cameraspace );
	// Cosine of the angle between the normal and the light direction, 
	// clamped above 0
	//  - light is at the vertical of the triangle -> 1
	//  - light is perpendicular to the triangle -> 0
	//  - light is behind the triangle -> 0
	float cosTheta = clamp( dot( n,l ), 0,1 );
	
	// Eye vector (towards the camera)
	vec3 E = normalize(EyeDirection_cameraspace);
	// Direction in which the triangle reflects the light
	vec3 R = reflect(-l,n);
	// Cosine of the angle between the Eye vector and the Reflect vector,
	// clamped to 0
	//  - Looking into the reflection -> 1
	//  - Looking elsewhere -> < 1
	float cosAlpha = clamp( dot( E,R ), 0,1 );
	
	float visibility = texture( shadowMap, vec3(ShadowCoord.xy / ShadowCoord.w, (ShadowCoord.z)/ShadowCoord.w-0.05));
	// vec3 visibility = texture( shadowMap, vec2(ShadowCoord.xy / ShadowCoord.w)).rgb;
	// visibility = (ShadowCoord.z/ShadowCoord.w  + 1) / 2;
	
	color = 
		// vec3(visibility)
		// Ambient : simulates indirect lighting
		 MaterialAmbientColor +
		 + visibility * MaterialDiffuseColor * LightColor * LightPower * cosTheta / (distance*distance)
		//// Specular : reflective highlight, like a mirror
		 + visibility * MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha,5) / (distance*distance)
		;
	
}